import pandas as pd
import requests
from datetime import timedelta, date
import pickle
import numpy as np
import seaborn as sns

pd.set_option('display.max_rows',200)

start = date(2018, 1, 1)
end = date(2019, 1, 1)

df = pd.DataFrame()

for sdate in range((end - start).days):
    fdate = (start + timedelta(sdate)).strftime('%y%m%d')
    url = "http://web.mta.info/developers/data/nyct/turnstile/turnstile_" + fdate + ".txt"
    try:
        data = pd.read_csv(url)
        data['file'] = fdate
        df = df.append(data)
    except:
        pass

df['date'] = pd.to_datetime(df.DATE)

df['turnid'] = df['STATION'] + '/' + df['SCP'] + '/' + df['C/A']

df = df.sort_values(['STATION','turnid','TIME'])

df = df.rename(columns={ df.columns[10]: "EXITS" })

# Remove readings at unusual times (that don't land on an even hour)
df = df[df.TIME.str.contains(':00:00', regex=False)]

pickle.dump(df, open('turnstiledata','wb'))

df = pickle.load(open('turnstiledata','rb'))

conditions = [  df.TIME.isin(['23:00:00','00:00:00','01:00:00','02:00:00']),
                df.TIME.isin(['03:00:00','04:00:00','05:00:00','06:00:00']),
                df.TIME.isin(['07:00:00','08:00:00','09:00:00','10:00:00']),
                df.TIME.isin(['11:00:00','12:00:00','13:00:00','14:00:00']),
                df.TIME.isin(['15:00:00','16:00:00','17:00:00','18:00:00']),
                df.TIME.isin(['19:00:00','20:00:00','21:00:00','22:00:00'])]

choices = ['00:00','04:00','08:00','12:00','16:00','20:00']

df['time'] = np.select(conditions, choices, default=df.TIME)

# # Check which turnstiles have the expected 42 audits
# audit_counts = df.groupby(['turnid','date','TIME']).sum().groupby(['turnid']).count()
# bad_turnids = audit_counts[audit_counts['ENTRIES']!=42].reset_index().turnid
# len(bad_turnids)
# good_turnids = audit_counts[audit_counts['ENTRIES']==42].reset_index().turnid
# len(good_turnids)
# pd.DataFrame(bad_turnids)
# len(df)
# irregular = df.merge(pd.DataFrame(bad_turnids),on='turnid')
# irregular.groupby(['STATION','turnid','date','TIME']).sum()

# Sum up for the different DESC, for each turnstile/timeblock

df = df.groupby(['STATION','turnid','date','time'], as_index=False).sum()

df['dayofweek'] = df.date.dt.day_name()
#df['daytype'] = np.where(df['dayofweek'].isin(['Sunday','Saturday']), 'Weekend', 'Weekday')

df['daytype'] = np.select([df.dayofweek.isin(['Monday','Tuesday','Wednesday','Thursday','Friday'])], ['Weekday'], default=df.dayofweek)

# Create the net entries as differene in this row from following row entries
df['entries'] = df.ENTRIES.shift(-1) - df.ENTRIES
df['exits'] = df.EXITS.shift(-1) - df.EXITS
df['passages'] = df.entries + df.exits

# Delete last row for each turnstile, for which we can't calculate the net # entries
df = df.groupby(['turnid'], as_index=False).apply(lambda x: x.iloc[:-1])
#df[df.STATION.str.contains('LEXINGTON')][df.dayofweek.str.contains('Sunday')]
# Sum up turnstiles into stations
df = df.groupby(['STATION','date','daytype','time'], as_index=False).sum()

# Eliminate negatives
df = df[df.entries>0]
df = df[df.exits>0]

pickle.dump(df, open('turnstiledata2','wb'))

df = pickle.load(open('turnstiledata2','rb'))

df = df.groupby(['STATION','daytype','time']).agg(['median','count'])

df.columns = df.columns.droplevel(1)

df.columns = ['ENTRIES','ENTRIES_c','EXITS','EXITS_c','entries','entries_c','exits','exits_c','passages','passages_c']

df = df[df.passages_c >=3]

df = df[['entries','exits','passages']].sort_values(['passages'],ascending=False).reset_index()

top6 = ['GRD CNTRL-42 ST','34 ST-PENN STA','34 ST-HERALD SQ','FULTON ST','23 ST','TIMES SQ-42 ST']

df_top6 = df[df.STATION.isin(top6)].groupby(['STATION','daytype','time']).sum().reset_index()

weekdays = df_top6[df_top6.daytype=='Weekday']
weekdays = weekdays[['time','STATION','passages']]
weekdays = weekdays.pivot(index='STATION',columns='time',values='passages')

GC = df_top6[df_top6.STATION=='GRD CNTRL-42 ST']
GC = GC[['time','daytype','passages']]
GC = GC.pivot(index='daytype',columns='time',values='passages')
GC
sns.heatmap(weekdays,cmap="Blues",annot=False);
